install.packages("swirl")
library(swirl)
installed.packages("swirl")
install.packages(swirl)
library(swirl)
install.packages("swirl")
library(swirl)
install.packages(curl)
install.packages('curl'')
)
''
install.packages('curl')
install.packages('libcurl')
install.packages('swirl')
install.packages('httpr')
install.packages('swirl' method ='curl')
install.packages('swirl', method ='curl')
install.packages('libcurl')
install.packages('RCurl')
install.packages('RCurl')
install.packages('swirl')
library('swirl')
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
head(airquality)
xyplot(Ozone~Wind, airquality)
xyplot(Ozone~Wind, airquality, col = 'red', pch = 8, main ='Big Apple Data')
xyplot(Ozone~Wind | as.factor(Month), airquality, layout = c(5,1))
xyplot(Ozone~Wind | Month, airquality, layout = c(5,1))
p<- xplot(Ozone~Wind, data = airquality)
p<- xyplot(Ozone~Wind, data = airquality)
p
names(p)
mynames[mfull]
mynames[myfull]
p[["formula"]]
p[['x.limits']]
table(f)
xyplot(y~x | f, layout = c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile,"plot1.R")
source(pathtofile,"plot1.R", local = TRUE)
source('plot1.R', local = TRUE)
pathtofile("plot1.R", local = TRUE)
pathtofile("plot1.R")
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), llocal = TRUE)
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
diamonds$color
table(diamond$color)
table(diamonds$color)
table(diamond$color, diamond$cut)
table(diamonds$color, diamonds$cut)
myedit('myLabels.R')
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price~carat | color *cut , data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price~carat | color *cut , data = diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
swirl()
library(swirl)
reset()
swirl()
rm(list=ls())
swirl()
library(swirl)
swirl()
reset()
main()
bye()
swirl()
str(mpg)
qplot(mpg$displ,mpg$hwy, mpg)
qplot(displ,hwy, mpg)
qplot(displ,hwy, data=mpg)
qplot(displ,hwy, data=mpg, color= drv)
qplot(displ,hwy, data=mpg, color= drv, geom = c('point', 'smooth'))
qplot(y=hwy, data=mpg, color=drv)
myhigh
qplot(drv,hwy, data = mpg, geom = "boxplot")
qplot(drv,hwy, data = mpg, geom = "boxplot", color= manufacturer)
qplot(hwy, data=mpg, fill= drv)
qplot(displ, hwy, data=mpg, facets = .~drv)
qplot(hwy, data =mpg, facets = drv ~., binwidth = 2)
qplot(displ, hwy, data = mpg, geom = c('point', 'smooth'), facets = . ~drv, method = 'leoss')
qplot(displ, hwy, data = mpg, geom = c('point', 'smooth'), facets = . ~drv, method = 'loess')
g <-ggplot(mpg, aes(displ,hwy)
)
summary(g)
g+geom_point()
(g+geom_point())+geom_smooth()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method= 'lm')
g+geom_point()+geom_smooth(method= 'lm')+facet_grid(.~drv)
g+geom_point()+geom_smooth(method= 'lm')+facet_grid(.~drv)+ggtitle('Swirl Rules!')
g+geom_point(color='pink', size = 4, appha = 1/2)
g+geom_point(color='pink', size = 4, alpha = 1/2)
g+geom_point(aes(size = 4, alpha = 1/2, color = drv))
g+geom_point(size = 4, alpha = 1/2, aes(color = drv))
g+geom_point( aes(color = drv))+labs(title='Swirl Rules!')+labs(x='Displacement', y ='Hwy Mileage')
g+geom_point(size = 4, alpha = 1/2, aes(color = drv))+geom_smooth(size = 4, linetype = 3, method='lm')
g+geom_point(size = 2, alpha = 1/2, aes(color = drv))+geom_smooth(size = 4, linetype = 3, method='lm', se= FALSE)
g+geom_point(aes(color = drv))+ theme_bw(base_family = 'Times')
plot(myx,myy, type = 'l',ylim=(-3,3))
plot(myx,myy, type = 'l',ylim=c(-3,3))
g<-ggplot(testdat, aes(x=myx, y = myy))
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim = c(-3,3))
g<-ggplot(mpg, aes(x=displ,y=hwy, color= factor(year)))
g+geom_point()
g+geom_point()+facet_grid(formula=drv~cyl, margins = TRUE)
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method='FALSE', size= 2, color="black")
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method='lm', size= 2,se=FALSE color="black")
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method='lm', size= 2,se=FALSE, color="black")
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method='lm', size= 2,se=FALSE, color="black")+labs(x='Displacement', y = 'Highway Mileage', title = 'Swirl Rules!')
str(diamonds)
qplot(price, data = diamonds)
range(diamond$price)
range(diamonds$price)
qplot(price, data = diamonds, binwidth= 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth= 18497/30, fill = cut)
qplot(price, data = diamonds, geom="density")
qplot(price, data = diamonds, geom="density", color='density')
qplot(price, data = diamonds, geom="density", color='cut')
qplot(price, data = diamonds, geom="density", color=cut)
qplot(carat,price, data=diamonds)
qplot(carat,price, data=diamonds, shape=cut)
qplot(carat,price, data=diamonds, color=cut)
qplot(carat,price, data=diamonds, color=cut, geom = c("smooth", "point"), method="lm")
qplot(carat,price, data=diamonds, color=cut, geom = c( "point","smooth"), method="lm")
qplot(carat,price, data=diamonds, color=cut, geom = c( "point","smooth"), method="lm", facets = .~cut)
g<-ggplot(diamonds, aes(depth,price))
summary(g)
g+geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1, length=4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat,cutpoints)
g<-ggplot(diamonds, aes(depth,price))
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size = 3, color= "pink")
ggplot(diamonds, aes(carat, price))+geom_boxplot()+facet_grid(.~cut)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?facet_grid
library(ggplot2)
?facet_grid
source('~/RepData/RepData_PeerAssessment1/repdata_preprocessing.R')
source('~/RepData/RepData_PeerAssessment1/repdata_preprocessing.R')
source('~/RepData/RepData_PeerAssessment1/repdata_preprocessing.R')
source('~/RepData/RepData_PeerAssessment1/repdata_preprocessing.R')
source('~/RepData/RepData_PeerAssessment1/repdata_preprocessing.R')
source('~/RepData/RepData_PeerAssessment1/repdata_preprocessing.R')
source('~/RepData/RepData_PeerAssessment1/repdata_preprocessing.R')
source('~/RepData/RepData_PeerAssessment1/repdata_preprocessing.R')
source('~/RepData/RepData_PeerAssessment1/repdata_preprocessing.R')
getwd()
setwd("~/RepData/RepData_PeerAssessment1")
source('~/RepData/RepData_PeerAssessment1/repdata_preprocessing.R')
